//13 task
        String lower1 = treeSet1.lower("Element2");
        System.out.println("Element strictly less than Element2: " + lower1);

        //14 task
        String firstElement = treeSet1.pollFirst();
        System.out.println("First element: " + firstElement);

        //15 task
        String lastElement1 = treeSet1.pollLast();
        System.out.println("Last element: " + lastElement1);

        //16 task
        boolean isRemoved = treeSet1.remove("Element2");
        System.out.println("Element2 removed: " + isRemoved);


        // 7. Compare two priority queues
        PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<>(Arrays.asList(1, 2, 3));
        PriorityQueue<Integer> priorityQueue2 = new PriorityQueue<>(Arrays.asList(1, 2, 3));
        System.out.println("Priority queues are equal: " + priorityQueue1.equals(priorityQueue2));

        // 8. Retrieve the first element of the priority queue
        System.out.println("First element of the priority queue: " + priorityQueue1.peek());

        // 9. Retrieve and remove the first element of the priority queue
        Integer removedElement = priorityQueue1.poll();
        System.out.println("Removed first element: " + removedElement);

        // 10. Convert a priority queue to an array
        Object[] array2 = priorityQueue1.toArray();
        System.out.println("Priority queue as an array: " + Arrays.toString(array2));

        // 11. Convert a Priority Queue element to string representations
        String queueAsString= priorityQueue1.toString();
        System.out.println("Priority queue as a string: " + queueAsString);


        //hashMap
        HashMap<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        // 8. Test if a map contains a mapping for the specified value
        boolean containsValue = map.containsValue(2);
        System.out.println("Map contains value 2: " + containsValue);

        // 9. Create a set view of the mappings contained in a map
        Set<Map.Entry<String, Integer>> entries = map.entrySet();
        System.out.println("Map entries: " + entries);

        // 10. Get the value of a specified key in a map
        Integer value = map.get("Two");
        System.out.println("Value for key Two: " + value);

        // 11. Get a set view of the keys contained in this map
        Set<String> keySet = map.keySet();
        System.out.println("Map keys: " + keySet);

        // 12. Get a collection view of the values contained in this map
        Collection<Integer> values = map.values();
        System.out.println("Map values: " + values);

        // 22. Get the portion of a map whose keys range from a given key (inclusive) to another key (exclusive)
        NavigableMap<String, Integer> navigableMap = new TreeMap<>(map);
        Map<String, Integer> subMap = navigableMap.subMap("One", false, "Three", true);
        System.out.println("Sub map: " + subMap);

        // 23. Get the portion of a map whose keys range from a given key to another key
        subMap = navigableMap.subMap("One", "Three ");
        System.out.println("Sub map: " + subMap);

        // 24. Get a portion of a map whose keys are greater than or equal to a given key
        subMap = navigableMap.tailMap("Two", true);
        System.out.println("Sub map: " + subMap);

        // 25. Get a key-value mapping associated with the least key greater than or equal to the given key. Return null if there is no such key
        Map.Entry<String, Integer> entry = navigableMap.ceilingEntry("Two");
        System.out.println("Ceiling entry: " + entry);

        // 26. Get the least key greater than or equal to the given key. Returns null if there is no such key
        String ceilingKey = navigableMap.ceilingKey("Two ");
        System.out.println("Ceiling key: " + ceilingKey);



    }
    
}